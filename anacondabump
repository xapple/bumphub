#!/usr/bin/env python3
# -*- coding: utf8 -*-

"""
A script to auto update python modules on anaconda.
See the README.md file for more information.

To set up conda on macOS do the following:

    $ brew install miniconda
    $ conda init "$(basename "${SHELL}")"
    $ mv ~/.bash_profile ~/.conda/conda_init.sh
    $ source ~/.conda/conda_init.sh
    $ conda install conda-build
    $ conda install anaconda-client

You also need your anaconda credentials to be recorded by running the command:

    $ anaconda login

Interesting blog article containing possible improvements to this script:

https://blog.gishub.org/how-to-publish-a-python-package-on-conda-forge
"""

# Built-in modules #
import os, sys, argparse, re, glob

# First party modules #
from autopaths import Path
from autopaths.tmp_path import new_temp_dir
from plumbing.check_cmd_found import check_cmd

# Third party modules #
import sh, tqdm

# Constants #
__version__ = '1.2.2'

# Create a shell parser #
parser = argparse.ArgumentParser(description=sys.modules[__name__].__doc__)

# Ask for the main argument #
help_msg = "The name of the module to process."
parser.add_argument("module", help=help_msg, type=str)

# Optional testing mode
parser.add_argument("--test", action='store_true')

# Parse the shell arguments #
args      = parser.parse_args()
pkg_name  = args.module
test_mode = args.test

# Also we need to make sure that all executables are available #
check_cmd('conda')
check_cmd('conda-build')
check_cmd('grayskull')

# Create a new temporary directory and switch to it #
tmp_dir = new_temp_dir()
old_cwd = os.getcwd()
os.chdir(tmp_dir)

# Print start #
print("Packaging '%s' for anaconda distribution." % pkg_name)
print("---------------------------")
print("Using temporary directory '%s'." % tmp_dir)

################################################################################
# Create a skeleton #
print("---------------------------")
if test_mode:
    print("-> Making a skeleton from the test PyPI index")
    skeleton = sh.grayskull('pypi', '--pypi-url',
                            'https://test.pypi.io/pypi/', pkg_name,
                            _out=sys.stdout, _err=sys.stderr)
else:
    print("-> Making a skeleton from the real PyPI index")
    skeleton = sh.grayskull('pypi', pkg_name,
                            _out=sys.stdout, _err=sys.stderr)

# Get the metadata file #
meta_file = tmp_dir + pkg_name + '/meta.yaml'
assert meta_file.exists

# Add other dependencies to the metadata file depending on package #
#if pkg_name == 'crest4':
#    meta_file.replace_line("  run:", "  run:\n    - blast\n    - vsearch")

################################################################################
# Build #
print("---------------------------")
print("-> Building package")

# Launch command #
conda_build = sh.Command('conda-build')
build = conda_build(pkg_name, '-c', 'conda-forge',
                              '-c', 'xapple',
                              '-c', 'bioconda')

# Find the tar path #
text = str(build.stdout, "UTF-8")

# Get the path of the resulting tar files #
pattern = "(/.+\.tar\.bz2)$"
hits = re.findall(pattern, text, re.MULTILINE)

# Take the last hit #
assert len(hits) > 0
tar_path = hits[-1]

# Report the path #
print("---------------------------")
print("-> Tar path found: %s" % tar_path)

################################################################################
# Upload #
print("---------------------------")
print("-> Uploading package")

# Don't forget to run "$ anaconda login" first.
# The skip options will skip a package that already exists
# Switch to '--force' to overwrite existing packages
upload = sh.anaconda('upload', '--skip', tar_path)

# Optional message #
print(str(upload.stderr, "UTF-8"))

# Done #
print("Success.")

# Back to original directory #
os.chdir(old_cwd)
