#!/usr/bin/env python2
# -*- coding: utf8 -*-

# Built-in modules #
import os, inspect, sys, argparse, shutil
from distutils.dir_util import copy_tree

# First party modules #
from plumbing.git import GitRepo

# Third party modules #
import sh

# Constants #
__version__ = '1.0.3'

# Parse the shell arguments #
parser = argparse.ArgumentParser(description=sys.modules[__name__].__doc__)
parser.add_argument("module", help="The name of the module to process", type=str)
args = parser.parse_args()
module_name = args.module

# Current directory #
filename    = inspect.getframeinfo(inspect.currentframe()).filename
current_dir = os.path.dirname(os.path.abspath(filename)) + '/'

################################################################################
### Create the documentation ###
# Messages #
print "--------------------------"
print "-> Generating the doc"

# Directories #
base_dir = os.path.expanduser("~/repos/%s/" % module_name)
code_dir = base_dir + module_name + '/'
doc_dir  = base_dir + 'documentation/'
auto_dir = doc_dir  + "automatic/"
html_dir = doc_dir  + "html/"

# Sphinx commands #
apidoc = sh.Command("sphinx-apidoc")
build  = sh.Command("sphinx-build")

# Update the documentation #
if os.path.exists(auto_dir): shutil.rmtree(auto_dir)
os.makedirs(auto_dir)
apidoc('-F', '-o', auto_dir, code_dir)

# Make HTML #
if os.path.exists(html_dir): shutil.rmtree(html_dir)
os.makedirs(html_dir)
build(auto_dir, html_dir)

################################################################################
### Commit to the gh-pages ###
# Messages #
print "--------------------------"
print "-> Commit to gh-pages"

# A second clone #
repos_dir = current_dir + 'repos/'
if not os.path.exists(repos_dir): os.makedirs(repos_dir)

# The repository #
orig_repo = GitRepo(base_dir)
copy_repo = GitRepo(repos_dir + module_name + '/', empty=True)

# Clone if not exists #
if not copy_repo:
    print "-> Cloning the repository once"
    orig_repo.re_clone(copy_repo)
    shutil.copyfile(orig_repo + '.git/config', copy_repo + '.git/config')

# Make branch if not exists #
if 'gh-pages' not in copy_repo.branches:
    print "-> Making a new branch once"
    sh.git(copy_repo.default + ['checkout', '--orphan', 'gh-pages'])
    #sh.git(copy_repo.default + ['rm', '-rf', copy_repo])

# Copy inside #
copy_tree(html_dir.rstrip('/'), copy_repo.rstrip('/'))

# Add the no Jekyll option #
sh.touch(copy_repo +".nojekyll")

# Add #
print copy_repo.add('*')

# Commit #
message  = 'Automatic update of the auto-generated documentation.'
message += ' Matches master-' + orig_repo.short_hash + '.'
print copy_repo.commit(message)

# Push #
print copy_repo.push('origin', 'gh-pages', shell=True)

# Print success #
print "Done."