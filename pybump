#!/usr/bin/env python2
# -*- coding: utf8 -*-
b'This module requires Python 2.7.x'

# Built-in modules #
import os, sys, argparse, shutil

# First party modules #
from plumbing.git import GitRepo

# Third party modules #
import sh
import pkgtools.pypi
from dialog import Dialog

# Constants #
__version__ = '0.0.1'

# Parse the shell arguments #
parser = argparse.ArgumentParser(description=sys.modules[__name__].__doc__)
parser.add_argument("module", help="The name of the module to process", type=str)
args = parser.parse_args()
module_name = args.module

# Directories #
base_dir = os.path.expanduser("~/repos/%s/" % module_name)
code_dir = base_dir + module_name + '/'

# The repository #
repo = GitRepo(base_dir)

################################################################################
### Bump the version ###
# Current version #
module = __import__(module_name)
v_current = module.__version__

# Compute parts #
maj, mid, fix = map(int, v_current.rstrip('dev').split('.'))

# Next version #
v_next = '.'.join(map(str, (maj, mid, fix+1)))
v_dev  = v_next + 'dev'

# Function #
def replace_everywhere(vcrnt, vnext):
    # Replace in __init__.py #
    path = code_dir + '__init__.py'
    base = "s/^%s/%s/g"
    find = "__version__ = '%s'" % vcrnt
    repl = "__version__ = '%s'" % vnext
    find = find.replace('.', '\.')
    sh.gsed('-i', base % (find, repl), path)
    # Replace in setup.py #
    path = base_dir + 'setup.py'
    base = "s/%s$/%s/g"
    find = vcrnt + "',"
    repl = vnext + "',"
    find = find.replace('.', '\.')
    sh.gsed('-i', base % (find, repl), path)
    # Replace in README #
    path = base_dir + 'README.md'
    base = "s/%s$/%s/g"
    find = "` version %s" % vcrnt
    repl = "` version %s" % vnext
    find = find.replace('.', '\.')
    sh.gsed('-i', base % (find, repl), path)
    # Add the files #
    repo.add(module_name + '/' + '__init__.py')
    repo.add('setup.py')
    repo.add('README.md')

# Bump the version #
replace_everywhere(v_current, v_next)

# Commit #
message = 'Version %s' % v_next
repo.commit(message)

# Tag #
repo.tag_head(v_next)

# Push #
repo.push()
repo.push(tags=True)

################################################################################
### Submit to PyPI ###
# Change directory #
os.chdir(base_dir)

# API to pypi #
pypi_api = pkgtools.pypi.PyPIXmlRpc()
releases = pypi_api.package_releases(module_name)

# Register it #
if not releases:
    title  = "PyPI upload"
    msg    = "The packages '%s' seems to not be registered with PyPI, register it ?"
    d      = Dialog(dialog="dialog")
    d.set_background_title(title)
    answer = d.yesno(msg)
    if answer != d.OK: sys.exit()
    sh.python('setup.py', 'register', '-r', 'pypi')

# Upload it #
# Optionally use twine ? sh.twine('upload', )
# Or the normal way: python setup.py sdist upload -r pypi
sh.python('setup.py', 'sdist', 'upload', '-r', 'pypi')

# Clean up #
manifest_file  = base_dir + 'MANIFEST'
dist_directory = base_dir + 'dist/'
os.remove(manifest_file)
shutil.rmtree(dist_directory)

################################################################################
# Return to development version #
replace_everywhere(v_next, v_dev)

# Commit #
message = 'Back to development version.'
repo.commit(message)

# Push #
repo.push()
repo.push(tags=True)

