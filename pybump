#!/usr/bin/env python3
# -*- coding: utf8 -*-

"""
A script to auto update python modules on PyPI and via git.
"""

# Built-in modules #
import os, sys, argparse

# First party modules #
from plumbing.git import GitRepo
from autopaths    import Path

# Third party modules #
import sh

# Constants #
__version__ = '1.1.1'

# Create a shell parser #
parser   = argparse.ArgumentParser(description=sys.modules[__name__].__doc__)
help_msg = "The name (or absolute path) of the module to process."

# Parse the shell arguments #
parser.add_argument("module", help=help_msg, type=str)
args = parser.parse_args()
path_or_name = args.module

# We can accepts module names or absolute paths #
if path_or_name.startswith('/'):
    base_dir    = Path(path_or_name)
    module_name = base_dir.name
else:
    base_dir    = Path("~/repos/%s/" % path_or_name)
    module_name = path_or_name

# The python code directory #
code_dir = base_dir + module_name + '/'

# The repository #
repo = GitRepo(base_dir)

################################################################################
### Bump the version ###
# The module itself must be importable #
module = __import__(module_name)

# Current version #
v_current = module.__version__

# Compute parts #
maj, mid, fix = map(int, v_current.rstrip('dev').split('.'))

# Functions #
def numbers_to_string(maj, mid, fix):
    return '.'.join(map(str, (maj, mid, fix)))

def plus_one_to_version(maj, mid, fix):
    maj_next = maj
    mid_next = mid
    fix_next = fix+1
    if fix_next > 9:
        fix_next = 0
        mid_next = mid+1
    return maj_next, mid_next, fix_next

# Next version #
maj_next, mid_next, fix_next = plus_one_to_version(maj, mid, fix)
v_next = numbers_to_string(maj_next, mid_next, fix_next)

# Dev version #
maj_dev, mid_dev, fix_dev = plus_one_to_version(maj_next, mid_next, fix_next)
v_dev = numbers_to_string(maj_dev, mid_dev, fix_dev)

# Messages #
print("---------------------------")
print('-> Versions overview')
print('Current version: %s' % v_current)
print('Next version:    %s' % v_next)
print('Dev version:     %s' % v_dev)

# Function #
def run_gsed(base, find, repl, path):
    find = find.replace('.', '\.')
    sh.gsed('-i', base % (find, repl), path)

def replace_everywhere(vcrnt, vnext):
    # Replace in __init__.py #
    path = code_dir + '__init__.py'
    base = "s/^%s/%s/g"
    find = "__version__ = '%s'" % vcrnt
    repl = "__version__ = '%s'" % vnext
    run_gsed(base, find, repl, path)

    # Replace in setup.py #
    path = base_dir + 'setup.py'
    base = "s/%s$/%s/g"
    find = vcrnt + "',"
    repl = vnext + "',"
    run_gsed(base, find, repl, path)

    # Replace in README #
    path = base_dir + 'README.md'
    base = "s/%s$/%s/g"
    find = "` version %s" % vcrnt
    repl = "` version %s" % vnext
    run_gsed(base, find, repl, path)

# Messages #
print("---------------------------")
print("-> Replacing everywhere")

# Bump the version #
replace_everywhere(v_current, v_next)

# Add the files #
print("---------------------------")
print("-> Adding files to staging area")
repo.add(module_name + '/' + '__init__.py')
repo.add('setup.py')
repo.add('README.md')

# Messages #
print("---------------------------")
print("-> Committing")

# Commit #
message = 'Version %s' % v_next
print(repo.commit(message))

# Tag #
repo.tag_head(v_next)

print("---------------------------")
print("-> Pushing")

# Push #
print(repo.push(shell=True))
print(repo.push(tags=True, shell=True))

################################################################################
### Submit to PyPI ###
# Change directory #
os.chdir(base_dir)

# API to pypi #
#pypi_api = pkgtools.pypi.PyPIXmlRpc()
#releases = pypi_api.package_releases(module_name)

# Register it -- not required anymore #
#if not releases:
#    from dialog import Dialog
#    title  = "PyPI upload"
#    msg    = "The packages '%s' seems to not be registered with PyPI, register it ?"
#    d      = Dialog(dialog="dialog")
#    d.set_background_title(title)
#    answer = d.yesno(msg)
#    if answer != d.OK: sys.exit()
#    else: sh.python('setup.py', 'register', '-r', 'pypi')

# Message #
print("--------------------------")
print("-> Building distribution")

# Build it #
print(sh.python('setup.py', 'sdist', 'bdist_wheel'))

# Message #
print("--------------------------")
print("-> Uploading using twine")

# Upload it #
print(sh.twine('upload', 'dist/*.tar.gz'))

# Message #
print("--------------------------")
print("-> Cleaning up")

# Clean up #
manifest_file   = base_dir + 'MANIFEST'
dist_directory  = base_dir + 'dist/'
build_directory = base_dir + 'build/'
egg_directory   = base_dir + module_name + '.egg-info/'

manifest_file.remove()
dist_directory.remove()
build_directory.remove()
egg_directory.remove()

################################################################################
# Messages #
print("---------------------------")
print("-> Replacing everywhere (dev)")

# Return to development version #
replace_everywhere(v_next, v_dev)

# Add the files #
repo.add(module_name + '/' + '__init__.py')
repo.add('setup.py')
repo.add('README.md')

# Commit #
print(repo.commit('Back to development version.'))

# Messages #
print("---------------------------")
print("-> Pushing (dev)")

# Push #
print(repo.push(shell=True))