#!/usr/bin/env python3
# -*- coding: utf8 -*-

"""
A script to auto update python modules on PyPI and via git.
See the README.md file for more information.
"""

# Built-in modules #
import os, sys, argparse

# First party modules #
from autopaths    import Path
from plumbing.git import GitRepo
from plumbing.check_cmd_found import check_cmd

# Third party modules #
import sh

# Constants #
__version__ = '1.1.3'

# Create a shell parser #
parser = argparse.ArgumentParser(description=sys.modules[__name__].__doc__)

# Ask for only one argument #
help_msg = "The name (or filesystem path) of the module to process."
parser.add_argument("module", help=help_msg, type=str)

# Parse the shell arguments #
args = parser.parse_args()
path_or_name = args.module

# We can accept module names or filesystem paths #
if '/' in path_or_name:
    base_dir    = Path(path_or_name)
    module_name = base_dir.name
else:
    base_dir    = Path("~/repos/%s/" % path_or_name)
    module_name = path_or_name

# The python code directory #
code_dir = base_dir + module_name + '/'

# The repository #
repo = GitRepo(base_dir)

################################################################################
# At this point we should have following variables:
# repo     -> /home/bob/repos/coolmodule/
# base_dir -> /home/bob/repos/coolmodule/
# code_dir -> /home/bob/repos/coolmodule/coolmodule/

# So let's confirm they exist #
base_dir.must_exist()
code_dir.must_exist()

# Change directory #
os.chdir(base_dir)

# Also we need to make sure that all executables are available #
check_cmd('gsed')
check_cmd('twine')
check_cmd('pdoc')

################################################################################
### Bump the version ###
# Add the module to the python path #
sys.path.insert(0, base_dir)

# The module itself must be importable #
module = __import__(module_name)

# Current version #
v_current = module.__version__

# Compute parts #
maj, mid, fix = map(int, v_current.rstrip('dev').split('.'))

# Functions #
def numbers_to_string(maj, mid, fix):
    return '.'.join(map(str, (maj, mid, fix)))

def plus_one_to_version(maj, mid, fix):
    maj_next = maj
    mid_next = mid
    fix_next = fix+1
    if fix_next > 9:
        fix_next = 0
        mid_next = mid+1
    return maj_next, mid_next, fix_next

# Next version #
maj_next, mid_next, fix_next = plus_one_to_version(maj, mid, fix)
v_next = numbers_to_string(maj_next, mid_next, fix_next)

# Dev version #
maj_dev, mid_dev, fix_dev = plus_one_to_version(maj_next, mid_next, fix_next)
v_dev = numbers_to_string(maj_dev, mid_dev, fix_dev)

# Messages #
print("---------------------------")
print('-> Versions overview')
print('Current version: %s' % v_current)
print('Next version:    %s' % v_next)
print('Dev version:     %s' % v_dev)

# Function #
def run_gsed(base, find, repl, path):
    find = find.replace('.', '\.')
    sh.gsed('-i', base % (find, repl), path)

def replace_everywhere(vcrnt, vnext):
    # Replace in __init__.py #
    path = code_dir + '__init__.py'
    base = "s/^%s/%s/g"
    find = "__version__ = '%s'" % vcrnt
    repl = "__version__ = '%s'" % vnext
    run_gsed(base, find, repl, path)

    # Replace in setup.py #
    path = base_dir + 'setup.py'
    base = "s/%s$/%s/g"
    find = vcrnt + "',"
    repl = vnext + "',"
    run_gsed(base, find, repl, path)

    # Replace in README #
    path = base_dir + 'README.md'
    base = "s/%s$/%s/g"
    find = "` version %s" % vcrnt
    repl = "` version %s" % vnext
    run_gsed(base, find, repl, path)

# Messages #
print("---------------------------")
print("-> Replacing everywhere")

# Bump the version #
replace_everywhere(v_current, v_next)

# Add the files #
print("---------------------------")
print("-> Adding files to staging area")
repo.add(module_name + '/' + '__init__.py')
repo.add('setup.py')
repo.add('README.md')

################################################################################
### Regenerate the documentation with pdoc3 ###
from plumbing.check_cmd_found import check_cmd
check_cmd('pdoc3')

# Launch command #
print("---------------------------")
print("-> Regenerating the documentation with pdoc3")
print(sh.pdoc3('--html', '--output-dir', base_dir + 'docs',
               '--force', code_dir))

# Add the files #
print("---------------------------")
print("-> Adding documentation directory to staging area")
repo.add('docs/')

################################################################################
### Commit and push the tagged released version ###
# Messages #
print("---------------------------")
print("-> Committing")

# Commit #
message = 'Version %s' % v_next
print(repo.commit(message))

# Tag #
repo.tag_head(v_next)

print("---------------------------")
print("-> Pushing")

# Push #
print(repo.push(shell=True))
print(repo.push(tags=True, shell=True))

################################################################################
### Submit to PyPI ###

# Message #
print("--------------------------")
print("-> Building distribution")

# Build it #
print(sh.python3('setup.py', 'sdist', 'bdist_wheel'))

# Message #
print("--------------------------")
print("-> Uploading using twine")

# Upload it #
print(sh.twine('upload', 'dist/*.tar.gz'))

# Message #
print("--------------------------")
print("-> Cleaning up")

# Clean up #
manifest_file   = base_dir + 'MANIFEST'
dist_directory  = base_dir + 'dist/'
build_directory = base_dir + 'build/'
egg_directory   = base_dir + module_name + '.egg-info/'

# Remove files #
manifest_file.remove()
dist_directory.remove()
build_directory.remove()
egg_directory.remove()

################################################################################
### Bump the version again to development ###
# Messages #
print("---------------------------")
print("-> Replacing everywhere (dev)")

# Return to development version #
replace_everywhere(v_next, v_dev)

# Add the files #
repo.add(module_name + '/' + '__init__.py')
repo.add('setup.py')
repo.add('README.md')

# Commit #
print(repo.commit('Back to development version.'))

# Messages #
print("---------------------------")
print("-> Pushing (dev)")

# Push #
print(repo.push(shell=True))